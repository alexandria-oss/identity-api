// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"context"
	"github.com/alexandria-oss/identity-api/internal/application/command/cmdhandler"
	"github.com/alexandria-oss/identity-api/internal/application/query"
	"github.com/alexandria-oss/identity-api/internal/domain"
	"github.com/alexandria-oss/identity-api/internal/domain/repository"
	"github.com/alexandria-oss/identity-api/internal/infrastructure/driver"
	"github.com/alexandria-oss/identity-api/internal/infrastructure/logging"
	"github.com/alexandria-oss/identity-api/internal/infrastructure/persistence"
	"github.com/alexandria-oss/identity-api/internal/infrastructure/persistence/mw"
	"github.com/go-redis/redis/v8"
	"github.com/google/wire"
	"github.com/sirupsen/logrus"
)

// Injectors from wire.go:

func InjectUserQuery() (*query.UserQueryImp, func()) {
	cognitoIdentityProvider := driver.NewCognitoSession()
	kernelStore := domain.NewKernelStore()
	userAWSRepository := persistence.NewUserAWSRepository(cognitoIdentityProvider, kernelStore)
	context := provideContext()
	logger := logging.NewLogger()
	client, cleanup := driver.NewRedisClientPool(context, kernelStore, logger)
	user := provideUserRepository(userAWSRepository, client, kernelStore, logger)
	userQueryImp := query.NewUserQuery(user)
	return userQueryImp, func() {
		cleanup()
	}
}

func InjectUserCommandHandler() (*cmdhandler.UserHandlerImp, func()) {
	cognitoIdentityProvider := driver.NewCognitoSession()
	kernelStore := domain.NewKernelStore()
	userAWSRepository := persistence.NewUserAWSRepository(cognitoIdentityProvider, kernelStore)
	context := provideContext()
	logger := logging.NewLogger()
	client, cleanup := driver.NewRedisClientPool(context, kernelStore, logger)
	user := provideUserRepository(userAWSRepository, client, kernelStore, logger)
	userHandlerImp := cmdhandler.NewUserCommandHandler(user)
	return userHandlerImp, func() {
		cleanup()
	}
}

// wire.go:

var ctx = context.Background()

var dataSet = wire.NewSet(domain.NewKernelStore, logging.NewLogger, provideContext, driver.NewRedisClientPool, driver.NewCognitoSession, persistence.NewUserAWSRepository, provideUserRepository)

func SetContext(parentCtx context.Context) {
	ctx = parentCtx
}

func provideContext() context.Context {
	return ctx
}

func provideUserRepository(r *persistence.UserAWSRepository, p *redis.Client, k domain.KernelStore,
	l *logrus.Logger) repository.User {
	return mw.WrapUserRepository(r, p, k, l)
}
