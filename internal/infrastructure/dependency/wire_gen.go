// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package dependency

import (
	"github.com/alexandria-oss/identity-api/internal/application/command/cmdhandler"
	"github.com/alexandria-oss/identity-api/internal/application/query"
	"github.com/alexandria-oss/identity-api/internal/domain"
	"github.com/alexandria-oss/identity-api/internal/domain/repository"
	"github.com/alexandria-oss/identity-api/internal/infrastructure/driver"
	"github.com/alexandria-oss/identity-api/internal/infrastructure/persistence"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InjectUserQuery() *query.UserQueryImp {
	cognitoIdentityProvider := driver.NewCognitoSession()
	kernelStore := domain.NewKernelStore()
	userAWSRepository := persistence.NewUserAWSRepository(cognitoIdentityProvider, kernelStore)
	userQueryImp := query.NewUserQuery(userAWSRepository)
	return userQueryImp
}

func InjectUserCommandHandler() *cmdhandler.UserImp {
	cognitoIdentityProvider := driver.NewCognitoSession()
	kernelStore := domain.NewKernelStore()
	userAWSRepository := persistence.NewUserAWSRepository(cognitoIdentityProvider, kernelStore)
	userImp := cmdhandler.NewUserCommandHandler(userAWSRepository)
	return userImp
}

// wire.go:

var userQuery = wire.NewSet(domain.NewKernelStore, wire.Bind(new(repository.User), new(*persistence.UserAWSRepository)), driver.NewCognitoSession, persistence.NewUserAWSRepository, query.NewUserQuery)
